using Avalonia.Controls;
using Avalonia.Input;
using Avalonia.Interactivity;
using Avalonia.LogicalTree;
using EstragoniaTemplate.UI.ViewModels;
using static EstragoniaTemplate.UI.Utilities;

namespace EstragoniaTemplate.UI.Views;

public abstract partial class View : UserControl
{
    private Control? _lastFocussedControl;
    private int? _lastFocussedItemIndex;

    protected bool TrackFocussedControls = true;
    private NavigationMethod _previousNavigationMethod = NavigationMethod.Unspecified;

    private bool _firstLoad = true;
    private bool _focusLastOnLoaded = false;

    protected override void OnGotFocus(GotFocusEventArgs e)
    {
        _previousNavigationMethod = NavigationMethodBasedOnMouseOrKey;

        base.OnGotFocus(e);

        if (TrackFocussedControls && e.Source is Control control && control.IsFocused)
        {
            /* If the control is a child of an ItemsControl, focus is handled differently.
             * This is because the generated item controls do not persist if the
             * ItemsControl is hidden: they are created again when it is made visible,
             * rendering references to the old child controls obsolete. */
            var parent = control.Parent;
            while (parent != null)
            {
                // parent.Parent = ItemsControl
                // parent = container generated by ItemsControl (direct child)
                if (parent.Parent is ItemsControl itemsControl)
                {
                    _lastFocussedControl = itemsControl;
                    _lastFocussedItemIndex = itemsControl.IndexFromContainer((Control)parent);

                    return;
                }

                parent = parent.Parent;
            }

            _lastFocussedControl = control;
            _lastFocussedItemIndex = null;
        }
    }

    protected override void OnLoaded(RoutedEventArgs e)
    {
        base.OnLoaded(e);

        if (_firstLoad)
        {
            FocusNamedControls();
            _firstLoad = false;
        }

        if (_focusLastOnLoaded)
        {
            FocusLast();
            _focusLastOnLoaded = false;
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (DataContext == null)
            return;

        var viewModel = (ViewModel)DataContext;
        viewModel.NavigatorFocusReturned += (s, e) => FocusLast();

        viewModel.UserInterfaceFocusReturned += (s, e) =>
        {
            FocusLast();
            TrackFocussedControls = true;
        };
        viewModel.UserInterfaceFocusLost += (s, e) =>
        {
            TrackFocussedControls = false;
        };
    }

    protected virtual void FocusLast()
    {
        if (!IsLoaded)
        {
            _focusLastOnLoaded = true;
            return;
        }

        if (_lastFocussedControl != null && _lastFocussedItemIndex != null)
        {
            var itemsControl = (ItemsControl)_lastFocussedControl;
            var container = itemsControl.ContainerFromIndex(_lastFocussedItemIndex.Value);

            container.FindLogicalDescendantOfType<Button>().Focus(NavigationMethodBasedOnMouseOrKey);
        }
        else
        {
            _lastFocussedControl?.Focus(NavigationMethodBasedOnMouseOrKey);
        }
    }

    public void FocusNamedControls()
    {
        Control? focusableControl = null;
        int count = 0;

        do
        {
            focusableControl = this.FindControl<Control>($"initialFocus{count}");

            if (focusableControl?.Focusable ?? false)
                break;

            count++;
        }
        while (focusableControl != null);

        focusableControl?.Focus(NavigationMethodBasedOnMouseOrKey);
    }

    protected override void OnKeyDown(KeyEventArgs e)
    {
        base.OnKeyDown(e);

        if (e.Handled || e.KeyModifiers != KeyModifiers.None || e.Source is not InputElement inputElement)
            return;

        IInputElement? nextFocus = null;
        switch (e.Key)
        {
            case Key.Up:
                nextFocus = KeyboardNavigationHandler.GetNext(inputElement, NavigationDirection.Up);
                break;
            case Key.Down:
                nextFocus = KeyboardNavigationHandler.GetNext(inputElement, NavigationDirection.Down);
                break;
            case Key.Left:
                nextFocus = KeyboardNavigationHandler.GetNext(inputElement, NavigationDirection.Left);
                break;
            case Key.Right:
                nextFocus = KeyboardNavigationHandler.GetNext(inputElement, NavigationDirection.Right);
                break;
        }

        if (nextFocus != null && nextFocus.Focusable)
        {
            nextFocus.Focus(NavigationMethodBasedOnMouseOrKey);
            AudioManager.Instance?.Play(this, AudioManager.Sound.UISelect, AudioManager.Bus.UI);
            e.Handled = true;
        }
        else
        {
            var topLevel = TopLevel.GetTopLevel(inputElement);

            if (_previousNavigationMethod == NavigationMethod.Unspecified)
            {
                topLevel.FocusManager.ClearFocus();
                inputElement.Focus(NavigationMethodBasedOnMouseOrKey);
            }
        }

        _previousNavigationMethod = NavigationMethodBasedOnMouseOrKey;
    }
}
